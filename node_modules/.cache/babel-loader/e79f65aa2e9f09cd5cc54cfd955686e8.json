{"ast":null,"code":"import { createStore, applyMiddleware, compose } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { reduxFirestore, getFirestore } from \"redux-firestore\";\nimport { getFirebase } from \"react-redux-firebase\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport { firebaseConfig } from \"./firebase\";\nimport firebase from \"./firebase\";\n\nconst saveToLocalStorage = state => {\n  const serialized = JSON.stringify(state);\n  localStorage.setItem(\"state\", serialized);\n};\n\nconst checkLocalStorage = () => {\n  const serialized = localStorage.getItem(\"state\");\n  if (serialized === null) return undefined;\n  return {\n    state: JSON.parse(serialized)\n  };\n};\n\nexport const store = createStore(rootReducer, checkLocalStorage(), composeWithDevTools(compose(applyMiddleware(thunk.withExtraArgument({\n  getFirebase,\n  getFirestore\n})), reduxFirestore(firebase, firebaseConfig))));\nstore.subscribe(() => saveToLocalStorage(store.getState()));","map":{"version":3,"sources":["/Users/cameronking/Desktop/webby/src/store.js"],"names":["createStore","applyMiddleware","compose","composeWithDevTools","thunk","reduxFirestore","getFirestore","getFirebase","rootReducer","firebaseConfig","firebase","saveToLocalStorage","state","serialized","JSON","stringify","localStorage","setItem","checkLocalStorage","getItem","undefined","parse","store","withExtraArgument","subscribe","getState"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,iBAA7C;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,kBAAkB,GAAIC,KAAD,IAAW;AACpC,QAAMC,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAnB;AACAI,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,UAA9B;AACD,CAHD;;AAKA,MAAMK,iBAAiB,GAAG,MAAM;AAC9B,QAAML,UAAU,GAAGG,YAAY,CAACG,OAAb,CAAqB,OAArB,CAAnB;AACA,MAAIN,UAAU,KAAK,IAAnB,EAAyB,OAAOO,SAAP;AACzB,SAAO;AACLR,IAAAA,KAAK,EAAEE,IAAI,CAACO,KAAL,CAAWR,UAAX;AADF,GAAP;AAGD,CAND;;AAQA,OAAO,MAAMS,KAAK,GAAGtB,WAAW,CAC9BQ,WAD8B,EAE9BU,iBAAiB,EAFa,EAI9Bf,mBAAmB,CACjBD,OAAO,CACLD,eAAe,CAACG,KAAK,CAACmB,iBAAN,CAAwB;AAAEhB,EAAAA,WAAF;AAAeD,EAAAA;AAAf,CAAxB,CAAD,CADV,EAELD,cAAc,CAACK,QAAD,EAAWD,cAAX,CAFT,CADU,CAJW,CAAzB;AAYPa,KAAK,CAACE,SAAN,CAAgB,MAAMb,kBAAkB,CAACW,KAAK,CAACG,QAAN,EAAD,CAAxC","sourcesContent":["import { createStore, applyMiddleware, compose } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { reduxFirestore, getFirestore } from \"redux-firestore\";\nimport { getFirebase } from \"react-redux-firebase\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport { firebaseConfig } from \"./firebase\";\nimport firebase from \"./firebase\";\n\nconst saveToLocalStorage = (state) => {\n  const serialized = JSON.stringify(state);\n  localStorage.setItem(\"state\", serialized);\n};\n\nconst checkLocalStorage = () => {\n  const serialized = localStorage.getItem(\"state\");\n  if (serialized === null) return undefined;\n  return {\n    state: JSON.parse(serialized)\n  };\n};\n\nexport const store = createStore(\n  rootReducer,\n  checkLocalStorage(),\n\n  composeWithDevTools(\n    compose(\n      applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n      reduxFirestore(firebase, firebaseConfig)\n    )\n  )\n);\n\nstore.subscribe(() => saveToLocalStorage(store.getState()));\n"]},"metadata":{},"sourceType":"module"}